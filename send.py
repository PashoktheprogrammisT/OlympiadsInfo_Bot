import telebot
import json
import random
import re
import smtplib
from email.message import EmailMessage
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from datetime import datetime, timedelta

TOKEN = "7807718978:AAEE4pDJSrnDHHDh8uW4mPoumCaMwBoYq_s"
bot = telebot.TeleBot(TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
EMAIL_ADDRESS = 'pyth.pr@gmail.com'
EMAIL_PASSWORD = 'xcay plim mjky rtdd'

ITEMS_PER_PAGE = 5

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def load_json(path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_json(data, path):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}  # {user_id: {'state': 'awaiting_email/phone/password/confirmation', ...}}
pending_confirmations = {}  # {user_id: {'email': '', 'phone': '', 'password': '', 'code': ''}}

# === –û–¢–ü–†–ê–í–ö–ê EMAIL ===
def send_confirmation_email(email, code):
    msg = EmailMessage()
    msg['Subject'] = '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
    msg['From'] = EMAIL_ADDRESS
    msg['To'] = email
    
    msg.set_content(
        f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–æ—Ç–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )
    
    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
        smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        smtp.send_message(msg)

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìã –°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥", "üìå –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    kb.row("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    kb.row("‚ùì –ü–æ–º–æ—â—å")
    return kb

# === –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
def is_registered(user_id):
    users = load_json("users.json")
    return user_id in users and (users[user_id].get('email') or users[user_id].get('phone'))

# === –ú–ï–ù–Æ –í–•–û–î–ê/–†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
def auth_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üì± –í–æ–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É", "üìß –í–æ–π—Ç–∏ –ø–æ email")
    kb.row("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    return kb

# === –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
def find_user_by_phone(phone):
    users = load_json("users.json")
    for user_id, user_data in users.items():
        if user_data.get('phone') == phone:
            return user_id, user_data
    return None, None

def find_user_by_email(email):
    users = load_json("users.json")
    for user_id, user_data in users.items():
        if user_data.get('email') == email:
            return user_id, user_data
    return None, None

# === –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê ===
def is_valid_phone(phone):
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
    return re.match(r'^\+?\d{10,15}$', phone) is not None

# === –ö–û–ú–ê–ù–î–ê START ===
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    
    if is_registered(user_id):
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, 
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=auth_menu()
        )

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
@bot.message_handler(func=lambda m: m.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
def handle_register_button(message):
    user_id = str(message.chat.id)
    
    if is_registered(user_id):
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_menu())
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.row("üìß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ email", "üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=kb)

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –°–ü–û–°–û–ë–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
@bot.message_handler(func=lambda m: m.text in ["üìß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ email", "üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"])
def handle_register_method(message):
    user_id = str(message.chat.id)
    
    if message.text == "üìß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ email":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=ReplyKeyboardRemove())
        user_states[user_id] = {'state': 'awaiting_email', 'action': 'register'}
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:", reply_markup=ReplyKeyboardRemove())
        user_states[user_id] = {'state': 'awaiting_phone', 'action': 'register'}

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –í–•–û–î–ê ===
@bot.message_handler(func=lambda m: m.text in ["üì± –í–æ–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É", "üìß –í–æ–π—Ç–∏ –ø–æ email"])
def handle_login_method(message):
    user_id = str(message.chat.id)
    
    if is_registered(user_id):
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!", reply_markup=main_menu())
    else:
        if message.text == "üì± –í–æ–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardRemove())
            user_states[user_id] = {'state': 'awaiting_phone', 'action': 'login'}
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=ReplyKeyboardRemove())
            user_states[user_id] = {'state': 'awaiting_email', 'action': 'login'}

# === –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê ===
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and 
                     user_states[str(message.chat.id)]['state'] == 'awaiting_phone')
def handle_phone(message):
    user_id = str(message.chat.id)
    phone = message.text.strip()
    action = user_states[user_id]['action']
    
    if not is_valid_phone(phone):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:")
        return
    
    if action == 'register':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–µ –∑–∞–Ω—è—Ç
        found_user_id, _ = find_user_by_phone(phone)
        if found_user_id:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏.")
            del user_states[user_id]
            return
        
        user_states[user_id] = {
            'state': 'awaiting_password',
            'action': 'register',
            'phone': phone
        }
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
    
    elif action == 'login':
        found_user_id, user_data = find_user_by_phone(phone)
        if not found_user_id:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            del user_states[user_id]
            return
        
        user_states[user_id] = {
            'state': 'awaiting_password',
            'action': 'login',
            'phone': phone,
            'target_user_id': found_user_id
        }
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")

# === –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê EMAIL ===
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and 
                     user_states[str(message.chat.id)]['state'] == 'awaiting_email')
def handle_email(message):
    user_id = str(message.chat.id)
    email = message.text.strip()
    action = user_states[user_id]['action']
    
    if '@' not in email or '.' not in email:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if action == 'register':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ email –Ω–µ –∑–∞–Ω—è—Ç
        found_user_id, _ = find_user_by_email(email)
        if found_user_id:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏.")
            del user_states[user_id]
            return
        
        user_states[user_id] = {
            'state': 'awaiting_password',
            'action': 'register',
            'email': email
        }
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
    
    elif action == 'login':
        found_user_id, user_data = find_user_by_email(email)
        if not found_user_id:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            del user_states[user_id]
            return
        
        user_states[user_id] = {
            'state': 'awaiting_password',
            'action': 'login',
            'email': email,
            'target_user_id': found_user_id
        }
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")

# === –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ü–ê–†–û–õ–Ø ===
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and 
                     user_states[str(message.chat.id)]['state'] == 'awaiting_password')
def handle_password(message):
    user_id = str(message.chat.id)
    password = message.text.strip()
    action = user_states[user_id]['action']
    
    if action == 'register':
        if len(password) < 6:
            bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É)
        if 'email' in user_states[user_id]:
            email = user_states[user_id]['email']
            confirmation_code = str(random.randint(100000, 999999))
            
            pending_confirmations[user_id] = {
                'email': email,
                'password': password,
                'code': confirmation_code
            }
            
            try:
                send_confirmation_email(email, confirmation_code)
                user_states[user_id]['state'] = 'awaiting_confirmation'
                bot.send_message(message.chat.id, 
                    f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                del user_states[user_id]
        
        elif 'phone' in user_states[user_id]:
            # –î–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ email
            phone = user_states[user_id]['phone']
            
            users = load_json("users.json")
            users[user_id] = {
                'phone': phone,
                'password': password,
                'subscriptions': [],
                'notify_days_before': 2,
                'last_auth': datetime.now().isoformat()
            }
            save_json(users, "users.json")
            
            del user_states[user_id]
            bot.send_message(message.chat.id, 
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–ù–æ–º–µ—Ä: {phone}\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", 
                reply_markup=main_menu()
            )
    
    elif action == 'login':
        target_user_id = user_states[user_id]['target_user_id']
        users = load_json("users.json")
        
        if users[target_user_id]['password'] == password:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users[user_id] = users[target_user_id].copy()
            users[user_id]['last_auth'] = datetime.now().isoformat()
            save_json(users, "users.json")
            
            del user_states[user_id]
            bot.send_message(message.chat.id, "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–î–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø ===
@bot.message_handler(func=lambda message: str(message.chat.id) in user_states and 
                     user_states[str(message.chat.id)]['state'] == 'awaiting_confirmation')
def handle_confirmation(message):
    user_id = str(message.chat.id)
    user_input = message.text.strip()
    
    if user_id not in pending_confirmations:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    saved_data = pending_confirmations[user_id]
    
    if user_input == saved_data['code']:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = load_json("users.json")
        users[user_id] = {
            'email': saved_data['email'],
            'password': saved_data['password'],
            'subscriptions': [],
            'notify_days_before': 2,
            'last_auth': datetime.now().isoformat()
        }
        save_json(users, "users.json")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del pending_confirmations[user_id]
        del user_states[user_id]
        
        bot.send_message(message.chat.id, 
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"Email: {saved_data['email']}\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", 
            reply_markup=main_menu()
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:")

# === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ===
def check_auth(message):
    user_id = str(message.chat.id)
    if not is_registered(user_id):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return False
    return True

@bot.message_handler(func=lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
def help_cmd(m):
    if not check_auth(m): return
    bot.send_message(m.chat.id,
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "üìã –°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥ ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä\n"
        "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚Äî –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "üìå –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø–∏—Å–∫–∞\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    )

def get_olympiad_page(page, action="none"):
    olympiads = load_json("olympiads.json")
    total = len(olympiads)
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    page_data = olympiads[start:end]

    text = f"üìã –û–ª–∏–º–ø–∏–∞–¥—ã (—Å—Ç—Ä. {page+1}):\n\n"
    kb = InlineKeyboardMarkup()

    for o in page_data:
        dt = datetime.fromisoformat(o["datetime"]).strftime("%d.%m.%Y %H:%M")
        text += f"{o['id']}. {o['title']} ‚Äî {dt}\n"
        if action == "subscribe":
            kb.add(InlineKeyboardButton(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {o['id']}", callback_data=f"sub:{o['id']}"))
        elif action == "unsubscribe":
            kb.add(InlineKeyboardButton(f"‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {o['id']}", callback_data=f"unsub:{o['id']}"))

    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{action}:{page-1}"))
    if end < total:
        nav.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page:{action}:{page+1}"))
    if nav:
        kb.row(*nav)

    return text, kb

@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥")
def show_list(m):
    if not check_auth(m): return
    text, kb = get_olympiad_page(0, action="none")
    bot.send_message(m.chat.id, text, reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
def show_subscribe_menu(m):
    if not check_auth(m): return
    text, kb = get_olympiad_page(0, action="subscribe")
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith("sub:"))
def handle_subscribe(call):
    user_id = str(call.from_user.id)
    if not is_registered(user_id):
        bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    oid = int(call.data.split(":")[1])
    users = load_json("users.json")
    
    if oid not in users[user_id]["subscriptions"]:
        users[user_id]["subscriptions"].append(oid)
        save_json(users, "users.json")
        bot.answer_callback_query(call.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {oid} –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")
    else:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

@bot.message_handler(func=lambda m: m.text == "üìå –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
def show_my_subs(m):
    if not check_auth(m): return
    
    user_id = str(m.chat.id)
    users = load_json("users.json")
    olympiads = load_json("olympiads.json")
    subs = users[user_id]["subscriptions"]
    
    if not subs:
        bot.send_message(m.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    text = "üìå –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    kb = InlineKeyboardMarkup()
    for o in olympiads:
        if o["id"] in subs:
            dt = datetime.fromisoformat(o["datetime"]).strftime("%d.%m.%Y %H:%M")
            text += f"{o['id']}. {o['title']} ‚Äî {dt}\n"
            kb.add(InlineKeyboardButton(f"‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {o['id']}", callback_data=f"unsub:{o['id']}"))
    bot.send_message(m.chat.id, text, reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith("unsub:"))
def handle_unsubscribe(call):
    user_id = str(call.from_user.id)
    if not is_registered(user_id):
        bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    oid = int(call.data.split(":")[1])
    users = load_json("users.json")
    
    if oid in users[user_id]["subscriptions"]:
        users[user_id]["subscriptions"].remove(oid)
        save_json(users, "users.json")
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {oid} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("page:"))
def handle_page_nav(call):
    _, action, page = call.data.split(":")
    page = int(page)
    text, kb = get_olympiad_page(page, action=action)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=kb
    )

@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def show_settings_hint(m):
    if not check_auth(m): return
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /settings <–¥–Ω–µ–π>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /settings 2")

@bot.message_handler(commands=["settings"])
def handle_settings(m):
    if not check_auth(m): return
    
    user_id = str(m.chat.id)
    users = load_json("users.json")
    args = m.text.split()
    
    if len(args) != 2 or not args[1].isdigit():
        bot.send_message(m.chat.id, "–ü—Ä–∏–º–µ—Ä: /settings 2")
        return
    
    days = int(args[1])
    users[user_id]["notify_days_before"] = days
    save_json(users, "users.json")
    bot.send_message(m.chat.id, f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ {days} –¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Ö–æ–¥–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ email")
bot.polling()
